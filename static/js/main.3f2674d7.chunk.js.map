{"version":3,"sources":["api/users.ts","api/todos.ts","components/TodoInfo/TodoInfo.tsx","components/UserInfo/UserInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","TodoInfo","post","className","UserInfo","userName","userLink","href","TodoList","posts","getUserName","getUserEmail","map","classnames","App","useState","todosFromServer","setPosts","textInput","setTextInput","selectedUserCount","setSelectedUserCount","usersFromServer","selectedUser","setSelectedUser","isTitleEmpty","setIsTitleEmpty","isUserNotSelected","setIsUserNotSelected","action","method","onSubmit","e","preventDefault","htmlFor","type","placeholder","value","onChange","event","target","selectedValue","Number","disabled","user","onClick","trim","maxId","Math","max","men","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f2674d7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","interface TodoInfoProps {\n  post: Post;\n}\n\ninterface Post {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ post }) => {\n  return (\n    <h2 className=\"TodoInfo__title\">\n      {post.title}\n    </h2>\n  );\n};\n","import React from 'react';\n\ninterface UserInfoProps {\n  userName: string;\n  // userEmail: string;\n  userLink: string;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = (\n  { userName, userLink },\n) => {\n  return (\n    <a className=\"UserInfo\" href={userLink}>\n      {userName}\n    </a>\n  );\n};\n","import classnames from 'classnames';\nimport { TodoInfo } from '../TodoInfo';\nimport { UserInfo } from '../UserInfo';\n\ninterface TodoListProps {\n  posts: Post[];\n  getUserName: (userId: number) => string;\n  getUserEmail: (userEmail: number) => string;\n}\n\ninterface Post {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport const TodoList: React.FC<TodoListProps> = (\n  { posts, getUserName, getUserEmail },\n) => {\n  return (\n    <section className=\"TodoList\">\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            <article\n              data-id={post.id}\n              className={classnames(\n                'TodoInfo', { 'TodoInfo--completed': post.completed },\n              )}\n            >\n              <TodoInfo post={post} />\n              <UserInfo\n                userName={getUserName(post.userId)}\n                userLink={getUserEmail(post.userId)}\n              />\n            </article>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const App = () => {\n  const [posts, setPosts] = useState([\n    ...todosFromServer,\n  ]);\n  const [textInput, setTextInput] = useState('');\n  const [selectedUserCount, setSelectedUserCount] = useState(0);\n  const [selectedUser, setSelectedUser] = useState(\n    usersFromServer[selectedUserCount],\n  );\n\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserNotSelected, setIsUserNotSelected] = useState(false);\n\n  const addNewPost = () => {\n    if (textInput.trim() === '') {\n      setIsTitleEmpty(true);\n    } else {\n      setIsTitleEmpty(false);\n    }\n\n    if (selectedUserCount === 0) {\n      setIsUserNotSelected(true);\n    } else {\n      setIsUserNotSelected(false);\n    }\n\n    if (textInput.trim() !== '' && selectedUserCount !== 0) {\n      const maxId = Math.max(...posts.map((post) => post.id));\n\n      setPosts([\n        ...posts,\n        {\n          id: maxId + 1,\n          title: textInput,\n          completed: true,\n          userId: selectedUser.id,\n        },\n      ]);\n\n      setTextInput('');\n      setSelectedUserCount(0);\n    }\n  };\n\n  const hanldeTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTextInput(event.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = event.target.value;\n\n    setSelectedUserCount(Number(selectedValue));\n    setSelectedUser(usersFromServer[Number(selectedValue) - 1]);\n    setIsUserNotSelected(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n  };\n\n  const getUserName = (userId: {}) => {\n    const men = usersFromServer.find((user) => user.id === userId);\n\n    return men ? men.name : 'Unknown User';\n  };\n\n  const getUserEmail = (userId: {}) => {\n    const men = usersFromServer.find((user) => user.id === userId);\n\n    return men ? men.email : 'Unknown Email';\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"inputLabel\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"inputLabel\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={textInput}\n            onChange={hanldeTitleChange}\n          />\n          {isTitleEmpty && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={selectedUserCount}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {isUserNotSelected\n          && <span className=\"error\">Please select a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={addNewPost}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        posts={posts}\n        getUserName={getUserName}\n        getUserEmail={getUserEmail}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}